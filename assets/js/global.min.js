if(window.location.href!='https://uxsniff.com/realtime' && window.location.pathname!='/clickmap' && window.location.pathname!='/heatmap' && window.location.pathname!='/heatmapz' && window.location.pathname!='/clickmapz'){ 
jQuery( document ).ajaxStart(function() {
  jQuery( "#loading" ).show();
});
jQuery( document ).ajaxStop(function() {
  jQuery( "#loading" ).hide();
});
}

function centerModal() {
  jQuery(this).css('display', 'block');
  var $dialog  = jQuery(this).find(".modal-dialog"),
  offset       = (jQuery(window).height() - $dialog.height()) / 2,
  bottomMargin = parseInt($dialog.css('marginBottom'), 10);

  // Make sure you don't hide the top part of the modal w/ a negative margin if it's longer than the screen height, and keep the margin equal to the bottom margin of the modal
  if(offset < bottomMargin) offset = bottomMargin;
  $dialog.css("margin-top", offset - 50);
}

jQuery(document).on('show.bs.modal', '.modal', centerModal);
jQuery(document).on('recenterModal', '.modal.in', centerModal);
jQuery(window).on("resize", function () {
    jQuery('.modal:visible').each(centerModal);
});



function UTCToLocal(utcTimestamp, format) {
  var format = format ? format : 'YYYY-MM-DD HH:mm:ss';
  return moment.unix(utcTimestamp).local().format(format);
}

  
jQuery(document).on('ready', function() {
    
//if(typeof tooltip != 'undefined'){
jQuery('body').tooltip({
    selector: '[data-toggle="tooltip"]'
});
//}


  // convert epoch timestamps to localtime - include date only
  jQuery(".epoch-timestamp").each(function() {
    var formattedTime = UTCToLocal(parseInt(jQuery(this).html()), "ll");
    jQuery(this).html(formattedTime);
  });

  // convert epoch timestamps to localtime - include both data and time
  jQuery(".epoch-timestamp-full").each(function() {
    var formattedTime = UTCToLocal(parseInt(jQuery(this).html()), "MMMM D, YYYY (h:mm a)");
    jQuery(this).html(formattedTime);
  });

 







  if(jQuery('.bottom[data-toggle="tooltip"]').length) jQuery('.bottom[data-toggle="tooltip"]').tooltip({placement: 'bottom'});
  if(jQuery('.right[data-toggle="tooltip"]').length) jQuery('.right[data-toggle="tooltip"]').tooltip({placement: 'right'});
  if(jQuery('.top[data-toggle="tooltip"]').length) jQuery('.top[data-toggle="tooltip"]').tooltip({placement: 'top'});
  if(jQuery('.left[data-toggle="tooltip"]').length) jQuery('.left[data-toggle="tooltip"]').tooltip({placement: 'left'});

  //alert(jQuery('.right[data-toggle="tooltip"]').length);

  

});


/* Animate Numbers  */
(function(jQuery) {
    jQuery.fn.animateNumbers = function(stop, commas, duration, ease) {
        return this.each(function() {
            var $this = jQuery(this);
            var start = parseInt($this.text().replace(/,/g, ""));
                        commas = (commas === undefined) ? true : commas;
            jQuery({value: start}).animate({value: stop}, {
                duration: duration === undefined ? 1000 : duration,
                easing: ease === undefined ? "swing" : ease,
                step: function() {
                        $this.text(Math.floor(this.value));
                                        if (commas) { $this.text($this.text().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,")); }
                },
                complete: function() {
                   if (parseInt($this.text()) !== stop) {
                       $this.text(stop);
                                           if (commas) { $this.text($this.text().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,")); }
                   }
                }
            });
        });
    };
})(jQuery);
